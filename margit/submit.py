import sys
import margit
from margit.utils import get_template
import datetime
from argparse import ArgumentParser
import yaml

import os
import os.path

from glob import glob
from threading import Thread
import time


@margit.cli_command
def submit(args):
    "Makes a job out of a template and submit it"
    parser = ArgumentParser(usage="margit template <arguments>")
    parser.add_argument("command", help="Executable file to submit")
    parser.add_argument(
        "--template", "-t", help="Template job defining the environment", default=None)
    parser.add_argument("--njobs", "-n", default=1,
                        help="Number of jobs to submit", type=int)
    parser.add_argument ("--quiet", "-q", action='store_true', 
                        help='Disable all info messages stderr')

    submission_mode = parser.add_mutually_exclusive_group()
    submission_mode.add_argument("--local", "-L", action='store_true',
                                 help="Submit the job to local")
    submission_mode.add_argument("--wait", "-w", type=int, default=None,
                                 help="Submit the job to DIRAC, but blocks until it ends")

    args = parser.parse_args(args)
    template = get_template(args.template)

    cfg_dict = dict(
        argument=args.command,
        margittemplates=margit.templates 
        )

    print("### DO NOT EDIT THIS FILE ###")
    print(yaml.dump(template))
    job = margit.core.get_job()
    job.setName(template['JobName'])
    setup = template['Setup']
    if isinstance(setup, str):
        setup = [setup]
    setup = ';'.join(sum([s.split('\n') for s in setup], []))
    setup = setup.format(**cfg_dict)

    command = template['Command'].format(**cfg_dict)

    job.setDestination("LCG.CNAF.it")
    job.setExecutable(template['Executable'].format(**cfg_dict),
                      arguments=f""" "{setup}" "{command}" """
                      )
    job.setLogLevel(template['LogLevel'])

    inputSB = [f.format(**cfg_dict)
               for f in template['InputSandBox']]
    if len(inputSB):
        job.setInputSandbox(inputSB)

    if len(template['OutputSandBox']):
        job.setOutputSandbox(template['OutputSandBox'])

    if args.local:
        job.runLocal(margit.core.get_dirac())
        return

    ids = []
    for iJob in range(args.njobs):
        job.setDIRACPlatform()
        ids.append(margit.core.get_dirac().submitJob(job)['JobID'])

    print("#"*80)
    print(yaml.dump({
        'JobID': ids,
        'submission': str(datetime.datetime.now())
    }))

    if args.wait is not None:
        t0 = time.time()
        while True:
            time.sleep(5)
            statuses = margit.core.get_dirac().getJobStatus(ids)
            statuses = [v['Status'] for v in statuses['Value'].values()]

            deadStatus = ['Done', 'Failed', 'Killed']
            nActive = len([s for s in statuses if s not in deadStatus])
            if nActive:
              if not args.quiet:
                print(f"Waiting for {nActive} to complete. Status of jobs: ", ", ".join(set(statuses)), file=sys.stderr)
            if time.time() - t0 > args.wait:
                raise ConnectionError(
                    "Timeout, increase wait time (-w, --wait)")

            if nActive == 0:
                break

    print (yaml.dump({status: statuses.count(status) for status in set(statuses)}), file=sys.stderr)
